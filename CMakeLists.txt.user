<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE QtCreatorProject>
<!-- Written by QtCreator 9.0.1, 2023-01-25T14:29:43. -->
<qtcreator>
 <data>
  <variable>EnvironmentId</variable>
  <value type="QByteArray">{59e93135-463d-44fb-8fef-f620883f4ec2}</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.ActiveTarget</variable>
  <value type="qlonglong">0</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.EditorSettings</variable>
  <valuemap type="QVariantMap">
   <value type="bool" key="EditorConfiguration.AutoIndent">true</value>
   <value type="bool" key="EditorConfiguration.AutoSpacesForTabs">false</value>
   <value type="bool" key="EditorConfiguration.CamelCaseNavigation">true</value>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.0">
    <value type="QString" key="language">Cpp</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QByteArray" key="CurrentPreferences">CppGlobal</value>
    </valuemap>
   </valuemap>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.1">
    <value type="QString" key="language">QmlJS</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QByteArray" key="CurrentPreferences">QmlJSGlobal</value>
    </valuemap>
   </valuemap>
   <value type="qlonglong" key="EditorConfiguration.CodeStyle.Count">2</value>
   <value type="QByteArray" key="EditorConfiguration.Codec">UTF-8</value>
   <value type="bool" key="EditorConfiguration.ConstrainTooltips">false</value>
   <value type="int" key="EditorConfiguration.IndentSize">4</value>
   <value type="bool" key="EditorConfiguration.KeyboardTooltips">false</value>
   <value type="int" key="EditorConfiguration.MarginColumn">80</value>
   <value type="bool" key="EditorConfiguration.MouseHiding">true</value>
   <value type="bool" key="EditorConfiguration.MouseNavigation">true</value>
   <value type="int" key="EditorConfiguration.PaddingMode">1</value>
   <value type="bool" key="EditorConfiguration.PreferSingleLineComments">false</value>
   <value type="bool" key="EditorConfiguration.ScrollWheelZooming">true</value>
   <value type="bool" key="EditorConfiguration.ShowMargin">false</value>
   <value type="int" key="EditorConfiguration.SmartBackspaceBehavior">0</value>
   <value type="bool" key="EditorConfiguration.SmartSelectionChanging">true</value>
   <value type="bool" key="EditorConfiguration.SpacesForTabs">true</value>
   <value type="int" key="EditorConfiguration.TabKeyBehavior">0</value>
   <value type="int" key="EditorConfiguration.TabSize">8</value>
   <value type="bool" key="EditorConfiguration.UseGlobal">true</value>
   <value type="bool" key="EditorConfiguration.UseIndenter">false</value>
   <value type="int" key="EditorConfiguration.Utf8BomBehavior">1</value>
   <value type="bool" key="EditorConfiguration.addFinalNewLine">true</value>
   <value type="bool" key="EditorConfiguration.cleanIndentation">true</value>
   <value type="bool" key="EditorConfiguration.cleanWhitespace">true</value>
   <value type="QString" key="EditorConfiguration.ignoreFileTypes">*.md, *.MD, Makefile</value>
   <value type="bool" key="EditorConfiguration.inEntireDocument">false</value>
   <value type="bool" key="EditorConfiguration.skipTrailingWhitespace">true</value>
   <value type="bool" key="EditorConfiguration.tintMarginArea">true</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.PluginSettings</variable>
  <valuemap type="QVariantMap">
   <valuemap type="QVariantMap" key="AutoTest.ActiveFrameworks">
    <value type="bool" key="AutoTest.Framework.Boost">true</value>
    <value type="bool" key="AutoTest.Framework.CTest">false</value>
    <value type="bool" key="AutoTest.Framework.Catch">true</value>
    <value type="bool" key="AutoTest.Framework.GTest">true</value>
    <value type="bool" key="AutoTest.Framework.QtQuickTest">true</value>
    <value type="bool" key="AutoTest.Framework.QtTest">true</value>
   </valuemap>
   <valuemap type="QVariantMap" key="AutoTest.CheckStates">
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:Actor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:Ask">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:AskVoid">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:Construction">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:Destruction">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:DestructionAllowedInReceiveOnSameThread">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:DestructionBlocksOnReceive">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:DestructionBlocksOnSend">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:NoSelfActorRef">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:NonConcurrentMailbox">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:OrderedMailbox">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:SelfDestructionDoesntCrashWaitingReceivingThreads">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor.test.cpp:TwoPhaseConstruction">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor_ref.test.cpp:ActorRef">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor_ref.test.cpp:Ask">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor_ref.test.cpp:AskOnDestroyedActor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor_ref.test.cpp:AskVoid">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/actor/actor_ref.test.cpp:CanOutliveActor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:AscendToNonOverzoomedTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:DoNotAscendMultipleTimesIfNotFound">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:DontRetainUnusedNonIdealTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:DontUseTilesLowerThanMinzoom">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:DontUseWrongParentTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:LoadOverscaledMaxZoomTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:LoadRequiredIfIdealTileCantBeFound">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:MaxParentOverscaleFactor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:PreferChildTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:RepeatedRenderWithMissingOptionals">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:SingleTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:UpdateRenderables">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:UseChildTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:UseOverlappingParentTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:UseOverzoomedTileAfterMaxzoom">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:UseParentAndChildTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:UseParentTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:UseParentTileWhenChildNotReady">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_renderables.test.cpp:WrappedTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_tile_masks.test.cpp:Complex">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_tile_masks.test.cpp:NoChildren">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_tile_masks.test.cpp:OneChild">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_tile_masks.test.cpp:ParentAndFourChildren">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/algorithm/update_tile_masks.test.cpp:UpdateTileMasks">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:AddMultiple">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:Annotations">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:AntimeridianAnnotationLarge">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:AntimeridianAnnotationSmall">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:ChangeMaxZoom">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:DebugEmpty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:DebugSparse">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:FillAnnotation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:ImmediateRemoveShape">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:LineAnnotation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:NonImmediateAdd">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:OverlappingFillAnnotation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:QueryFractionalZoomLevels">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:QueryRenderedFeatures">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:ReaddImage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:RemovePoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:RemoveShape">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:SwitchStyle">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:SymbolAnnotation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:SymbolAnnotationTileBoundary">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:TopOffsetPixels">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:UpdateFillAnnotationGeometry">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:UpdateFillAnnotationStyle">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:UpdateLineAnnotationGeometry">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:UpdateLineAnnotationStyle">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:UpdateSymbolAnnotationGeometry">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:UpdateSymbolAnnotationIcon">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:ViewFrustumCulling">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/annotations.test.cpp:VisibleFeatures">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/api_misuse.test.cpp:API">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/api_misuse.test.cpp:RenderWithoutCallback">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/custom_geometry_source.test.cpp:CustomGeometrySource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/custom_geometry_source.test.cpp:Grid">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/custom_layer.test.cpp:Basic">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/custom_layer.test.cpp:CustomLayer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:Query">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QueryFeatureExtensionsInvalidExtension">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QueryFeatureExtensionsSuperclusterChildren">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QueryFeatureExtensionsSuperclusterExpansionZoom">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QueryFeatureExtensionsSuperclusterLeaves">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QueryRenderedFeatures">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QueryRenderedFeaturesFilter">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QueryRenderedFeaturesFilterLayer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QuerySourceFeatureStates">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QuerySourceFeatures">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QuerySourceFeaturesFilter">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/query.test.cpp:QuerySourceFeaturesOptionValidation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/api/recycle_map.cpp:RecycleMapUpdateImages">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/geometry/dem_data.test.cpp:BackfillNeighbor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/geometry/dem_data.test.cpp:ConstructorMapbox">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/geometry/dem_data.test.cpp:ConstructorTerrarium">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/geometry/dem_data.test.cpp:DEMData">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/geometry/dem_data.test.cpp:InitialBackfill">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/geometry/line_atlas.test.cpp:LineAtlas">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/geometry/line_atlas.test.cpp:Random">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:Buckets">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:CircleBucket">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:FillBucket">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:LineBucket">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:RasterBucket">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:RasterBucketMaskComplex">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:RasterBucketMaskEmpty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:RasterBucketMaskNoChildren">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:RasterBucketMaskTwoChildren">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/bucket.test.cpp:SymbolBucket">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/context.test.cpp:GLContextMode">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/context.test.cpp:Shared">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/gl_functions.test.cpp:GLFunctions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/gl_functions.test.cpp:OpenDesktop">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/gl_functions.test.cpp:OpenGLES">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/object.test.cpp:GLObject">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/object.test.cpp:Store">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/gl/object.test.cpp:Value">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:AddLayer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:BoundOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:CameraToLatLngBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:CameraToLatLngBoundsUnwrappedCrossDateLine">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:CameraToLatLngBoundsUnwrappedWithRotation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:DISABLED_PlacedSymbolData">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:DefaultBoundOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:DefaultMapOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:DisabledSources">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:DontLoadUnneededTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:DoubleStyleLoad">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:Issue12432">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:Issue15216">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:Issue15342">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:KeepRenderData">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:LatLngBehavior">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:LatLngBoundsToCamera">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:LatLngBoundsToCameraWithBearing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:LatLngBoundsToCameraWithBearingPitchAndPadding">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:LatLngBoundsToCameraWithExcessivePadding">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:LatLngsToCamera">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:LatLngsToCameraWithBearingAndPitch">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:LatLngsToCameraWithBearingAndPitchMinMax">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:MapLoadedSignal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:MapLoadingSignal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:MapOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:NoContentTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:NoHangOnMissingImage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:Offline">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:PrefetchDeltaOverride">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:PrefetchDeltaOverrideCustomSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:ProjectionMode">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:RemoveLayer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:RendererState">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:SetStyleDefaultCamera">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:SetStyleInvalidJSON">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:SetStyleInvalidURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:SourceMinimumUpdateIntervalOverride">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:StyleEarlyMutation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:StyleExpired">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:StyleExpiredWithAnnotations">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:StyleExpiredWithRender">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:StyleFresh">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:StyleLoadedSignal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:TEST_DISABLED_ON_CI">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:TEST_REQUIRES_SERVER">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:UniversalStyleGetter">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:VolatileSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map.test.cpp:WithoutVAOExtension">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map_snapshotter.test.cpp:MapSnapshotter">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map_snapshotter.test.cpp:TEST_REQUIRES_SERVER">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map_snapshotter.test.cpp:setSize">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/map_snapshotter.test.cpp:setStyleJSON">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/prefetch.test.cpp:Map">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/prefetch.test.cpp:PrefetchTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:Anchor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:Antimeridian">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:Camera">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:ConstrainHeightOnly">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:ConstrainWidthAndHeight">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:DefaultTransform">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsClampPitch">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsClampToBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsInvalidOrientation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsInvalidSize">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsInvalidState">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsInvalidZ">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsNanInput">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsOrientationRoll">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsSetOrientation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:FreeCameraOptionsStateSynchronization">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:IntegerZoom">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:InvalidBearing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:InvalidPitch">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:InvalidZoom">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:IsPanning">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:LatLngBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:MinMaxPitch">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:MoveBy">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:Padding">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:PerspectiveProjection">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:ProjectionMode">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:Transform">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/map/transform.test.cpp:UnwrappedLatLng">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/clamp.test.cpp:ClampFloatingPoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/clamp.test.cpp:ClampIntegral">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/clamp.test.cpp:Math">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/minmax.test.cpp:MinMaxFloatingPoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/minmax.test.cpp:MinMaxIntegral">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/wrap.test.cpp:WrapHigherValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/wrap.test.cpp:WrapInRangeValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/wrap.test.cpp:WrapLowerValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/wrap.test.cpp:WrapMaxValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/math/wrap.test.cpp:WrapMinValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/platform/settings.test.cpp:SetAndGet">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/platform/settings.test.cpp:Settings">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/programs/symbol_program.test.cpp:SymbolProgram">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/programs/symbol_program.test.cpp:SymbolSizeBinder">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/backend_scope.test.cpp:BackendScope">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/backend_scope.test.cpp:ChainedScopes">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/backend_scope.test.cpp:NestedScopes">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/backend_scope.test.cpp:SingleScope">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:AddRemove">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:Basic">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:ImageManager">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:Missing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:NotifiesRequestorImmediatelyIfDependenciesAreSatisfied">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:NotifiesRequestorWhenSpriteIsLoaded">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:OnStyleImageMissingAfterSpriteLoaded">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:OnStyleImageMissingBeforeSpriteLoaded">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:RemoveReleasesBinPackRect">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:RemoveUnusedStyleImages">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/image_manager.test.cpp:Update">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/pattern_atlas.test.cpp:Basic">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/pattern_atlas.test.cpp:PatternAtlas">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/renderer/pattern_atlas.test.cpp:Updates">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_loader.test.cpp:ImageLoadingCorrupted">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_loader.test.cpp:ImageLoadingFail">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_loader.test.cpp:JSONLoadingCorrupted">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_loader.test.cpp:JSONLoadingFail">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_loader.test.cpp:LoadingCancel">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_loader.test.cpp:LoadingSuccess">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_loader.test.cpp:SpriteLoader">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:Sprite">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteImageCreation1_5x">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteImageCreation1x">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteImageCreation2x">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteImageCreationInvalid">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingEmptyImage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingInvalidContent">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingInvalidJSON">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingInvalidStretches">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingNegativeWidth">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingNullRatio">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingSimpleWidthHeight">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingStretchAndContent">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/sprite/sprite_parser.test.cpp:SpriteParsingWidthTooBig">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:AcceptsURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:AssetFileSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:EmptyFile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:InvalidURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:Load">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:NonEmptyFile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:NonExistentFile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:ReadDirectory">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/asset_file_source.test.cpp:URLEncoding">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/database_file_source.test.cpp:DatabaseFileSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/database_file_source.test.cpp:PauseResume">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/database_file_source.test.cpp:VolatileResource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/headers.test.cpp:HTTPHeader">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/headers.test.cpp:Parsing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/http_file_source.test.cpp:HTTPFileSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/http_file_source.test.cpp:TEST_REQUIRES_SERVER">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:AcceptsURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:EmptyFile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:InvalidURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:LocalFileSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:NonEmptyFile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:NonExistentFile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:ReadDirectory">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:URLEncoding">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/local_file_source.test.cpp:URLLimit">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/main_resource_loader.test.cpp:MainResourceLoader">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/main_resource_loader.test.cpp:OptionalExpired">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/main_resource_loader.test.cpp:OptionalNonExpired">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/main_resource_loader.test.cpp:OptionalNotFound">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/main_resource_loader.test.cpp:ResourceOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/main_resource_loader.test.cpp:SetResourceCachePath">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/main_resource_loader.test.cpp:TEST_REQUIRES_SERVER">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/mbtiles_file_source.test.cpp:AbsolutePath">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/mbtiles_file_source.test.cpp:AcceptsURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/mbtiles_file_source.test.cpp:MBTilesFileSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/mbtiles_file_source.test.cpp:NonExistentFile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/mbtiles_file_source.test.cpp:NonExistentTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/mbtiles_file_source.test.cpp:Tile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/mbtiles_file_source.test.cpp:TileJSON">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline.test.cpp:EncodeDecode">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline.test.cpp:OfflineGeometryRegionDefinition">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline.test.cpp:OfflineTilePyramidRegionDefinition">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:BatchInsertion">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:BatchInsertionMapboxTileCountExceeded">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:ChangePath">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:CorruptDatabaseOnOpen">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:CorruptDatabaseOnQuery">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:CreateRegion">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:CreateRegionInfiniteMaxZoom">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:DowngradeSchema">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:GetRegionCompletedStatus">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:GetRegionDefinition">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:HasRegionResource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:HasRegionResourceTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:IncrementalVacuum">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:Invalidate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:ListRegions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MapboxTileLimitExceeded">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithInvalidDb">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithInvalidPath">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithMultipleRegionsWithOverlap">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithMultipleRegions_New">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithSingleRegionTooManyExistingTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithSingleRegionTooManyNewTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithSingleRegion_AmbientTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithSingleRegion_New">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MergeDatabaseWithSingleRegion_NoUpdate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MigrateFromV2Schema">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MigrateFromV3Schema">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MigrateFromV4Schema">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:MigrateFromV5Schema">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:OfflineDatabase">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:OfflineMapboxTileCount">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:OfflineRegionDoesNotAffectAmbientCacheSize">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutAndGetResource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutDoesNotStoreConnectionErrors">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutDoesNotStoreServerErrors">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutEvictsLeastRecentlyUsedResources">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutFailsWhenEvictionInsuffices">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutRegionResourceDoesNotEvict">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutResource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutResourceNoContent">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutResourceReadOnlyMode">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutReturnsSize">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:PutTileNotFound">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:ResetDatabase">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:TEST_REQUIRES_WRITE">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_database.test.cpp:UpdateMetadata">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:Activate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:AllOfflineRequestsHaveLowPriorityAndOfflineUsage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:Deactivate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:DiskFull">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:DoesNotFloodTheFileSourceWithRequests">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:ExcludeIdeographs">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:GeoJSONSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:GetStatusNoResources">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:GetStatusStyleAndSourceComplete">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:GetStatusStyleComplete">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:InlineSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:InterruptAndResume">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:NoFreezingOnCachedTilesAndNewStyle">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:NoFreezingOnNotFoundError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:NoSubresources">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:OfflineDownload">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:ReactivatePreviouslyCompletedDownload">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:RequestError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:RequestErrorsAreRetried">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:ResourceOfflineUsageUnset">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:TileCountLimitExceededNoTileResponse">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:TileCountLimitExceededWithTileResponse">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/offline_download.test.cpp:WithPreviouslyExistingTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/online_file_source.test.cpp:Cancel">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/online_file_source.test.cpp:ChangeAPIBaseURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/online_file_source.test.cpp:ChangeTileServerOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/online_file_source.test.cpp:GetBaseURLAndApiKeyWhilePaused">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/online_file_source.test.cpp:OnlineFileSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/online_file_source.test.cpp:TEST_REQUIRES_SERVER">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/resource.test.cpp:Glyphs">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/resource.test.cpp:Image">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/resource.test.cpp:Resource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/resource.test.cpp:Source">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/resource.test.cpp:SpriteImage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/resource.test.cpp:SpriteJSON">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/resource.test.cpp:Style">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/resource.test.cpp:Tile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/sqlite.test.cpp:CloseDatabaseWithPendingTransaction">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/sqlite.test.cpp:CloseMovedDatabaseWithPendingTransaction">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/sqlite.test.cpp:SQLite">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/sqlite.test.cpp:Statement">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/storage/sqlite.test.cpp:TEST_REQUIRES_WRITE">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/conversion_impl.test.cpp:Conversion">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/conversion_impl.test.cpp:Move">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/function.test.cpp:CompositeFunctionExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/function.test.cpp:FormattedIdentityFunction">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/function.test.cpp:Function">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/function.test.cpp:StyleConversion">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/function.test.cpp:TokenStrings">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/geojson_options.test.cpp:Basic">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/geojson_options.test.cpp:ErrorHandling">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/geojson_options.test.cpp:FullConversion">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/geojson_options.test.cpp:GeoJSONOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/geojson_options.test.cpp:RetainsDefaults">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/layer.test.cpp:LayerTransition">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/layer.test.cpp:OverrideDefaults">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/layer.test.cpp:RoundtripWithTransitions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/layer.test.cpp:SerializeDefaults">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/layer.test.cpp:SetGenericProperties">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/light.test.cpp:Light">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/property_value.test.cpp:PropertyValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Array">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Boolean">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Color">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Double">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Enum">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Filter">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Int64">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Layout">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Map">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:NullValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:PropertyExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:PropertyValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:String">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Stringify">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Uint64">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Value">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/stringify.test.cpp:Vector">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/tileset.test.cpp:BoundsAreClamped">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/tileset.test.cpp:Empty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/tileset.test.cpp:ErrorHandling">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/tileset.test.cpp:FullConversion">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/tileset.test.cpp:InvalidBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/tileset.test.cpp:PointBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/tileset.test.cpp:Tileset">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/conversion/tileset.test.cpp:ValidWorldBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/expression/expression.test.cpp:Expression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/expression/expression.test.cpp:ExpressionEquality">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/expression/expression.test.cpp:ExpressionEqualityTest">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/expression/expression.test.cpp:IsExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/expression/util.test.cpp:Util_rgba">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:All">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:AllExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:Any">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:AnyExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:EqualsNull">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:EqualsNumber">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:EqualsString">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:EqualsType">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:Expression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:ExpressionLegacyMix">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:Filter">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:Has">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:ID">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:InID">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:InType">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:Internal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:LegacyExpressionInvalidType">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:LegacyProperty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:None">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:NotHas">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:PropertyExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:Serialize">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:Short">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/filter.test.cpp:ZoomExpressionNested">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/properties.test.cpp:Evaluate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/properties.test.cpp:EvaluateDefaultValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/properties.test.cpp:EvaluateTransitionedConstantWithDelay">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/properties.test.cpp:EvaluateTransitionedConstantWithoutDelay">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/properties.test.cpp:EvaluateUntransitionedConstant">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/properties.test.cpp:TransitioningDataDrivenPropertyValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/properties.test.cpp:TransitioningPropertyValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:Constant">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:Defaults">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:DistanceExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:Expression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:FormatSectionOverride">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:ImageExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:Issue8460">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:PropertyExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:WithinExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:WithinExpressionAntiMeridian">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/property_expression.test.cpp:ZoomInterpolation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:CustomGeometrySourceSetTileData">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:GeoJSONSourceTilesAfterDataReset">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:GeoJSonSourceUrlUpdate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:ImageSourceImageUpdate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:InvisibleSourcesTileNecessity">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:LoadingCorrupt">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:LoadingFail">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterDEMTileAttribution">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterDEMTileCancel">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterDEMTileCorrupt">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterDEMTileEmpty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterDEMTileFail">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterTileAttribution">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterTileCancel">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterTileCorrupt">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterTileEmpty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RasterTileFail">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:RenderTileSetSourceUpdate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:SetMaxParentOverscaleFactor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:Source">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:SourceMinimumUpdateInterval">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:VectorTileCancel">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:VectorTileCorrupt">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:VectorTileEmpty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/source.test.cpp:VectorTileFail">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style.test.cpp:AddRemoveImage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style.test.cpp:AddRemoveRemoveImage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style.test.cpp:DuplicateSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style.test.cpp:Properties">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style.test.cpp:RemoveSourceInUse">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style.test.cpp:SourceImplsOrder">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style.test.cpp:Style">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:FractionalRatio">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:InvalidContent">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:InvalidStretchX">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:InvalidStretchY">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:Retina">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:StretchContent">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:StyleImage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:ZeroHeight">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:ZeroRatio">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_image.test.cpp:ZeroWidth">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:BackgroundProperties">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:CircleProperties">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:DuplicateLayer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:FillProperties">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:IncompatibleLayer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:Layer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:LineProperties">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:Observer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:RasterProperties">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_layer.test.cpp:SymbolLayerOverrides">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:FontStacks">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:FontStacksCaseExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:FontStacksGetExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:FontStacksMatchExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:FontStacksNoTextField">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:FontStacksStepExpression">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:ParseStyle">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:StyleParser">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/style/style_parser.test.cpp:StyleParserTest">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/bidi.test.cpp:ArabicShaping">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/bidi.test.cpp:BiDi">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/bidi.test.cpp:MixedShaping">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/bidi.test.cpp:ReverseArabic">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/bidi.test.cpp:ReverseMixed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/bidi.test.cpp:StyledText">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/bidi.test.cpp:Tashkeel">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/bidi.test.cpp:WithLineBreaks">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/calculate_tile_distances.test.cpp:EmptySegment">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/calculate_tile_distances.test.cpp:Line">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/calculate_tile_distances.test.cpp:Point">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/calculate_tile_distances.test.cpp:calculateTileDistances">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/cross_tile_symbol_index.test.cpp:CrossTileSymbolLayerIndex">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/cross_tile_symbol_index.test.cpp:addBucket">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/cross_tile_symbol_index.test.cpp:bucketReplacement">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/cross_tile_symbol_index.test.cpp:noDuplicatesWithinZoomLevel">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/cross_tile_symbol_index.test.cpp:offscreenSymbols">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/cross_tile_symbol_index.test.cpp:resetIDs">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/formatted.test.cpp:Empty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/formatted.test.cpp:Equality">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/formatted.test.cpp:Formatted">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/formatted.test.cpp:ToString">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:ContinuedLineLongLabels">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:ContinuedLineShortLabels">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:GetCenterAnchor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:GetCenterAnchorFailMaxAngle">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:GetCenterAnchorOutsideTileBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:NonContinuedLineLongLabels">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:NonContinuedLineShortLabels">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:OverscaledAnchorsInParent">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:UseMidpointForShortLine">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/get_anchors.test.cpp:getAnchors">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:GlyphManager">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:ImmediateFileSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:LoadLocalCJKGlyph">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:LoadLocalCJKGlyphAfterLoadingRangeFromURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:LoadingCancel">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:LoadingCorrupted">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:LoadingFail">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:LoadingInvalid">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_manager.test.cpp:LoadingSuccess">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_pbf.test.cpp:GlyphPBF">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/glyph_pbf.test.cpp:Parsing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/language_tag.test.cpp:Generation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/language_tag.test.cpp:LanguageTag">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/language_tag.test.cpp:Parsing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/local_glyph_rasterizer.test.cpp:LocalGlyphRasterizer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/local_glyph_rasterizer.test.cpp:NoLocal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/local_glyph_rasterizer.test.cpp:NoLocalWithContentInsets">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/local_glyph_rasterizer.test.cpp:NoLocalWithContentInsetsAndPitch">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/quads.test.cpp:getIconQuads">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/quads.test.cpp:normal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/quads.test.cpp:style">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/shaping.test.cpp:Shaping">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/shaping.test.cpp:ZWSP">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/tagged_string.test.cpp:ImageSections">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/tagged_string.test.cpp:TaggedString">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/text/tagged_string.test.cpp:Trim">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/custom_geometry_tile.test.cpp:CustomGeometryTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/custom_geometry_tile.test.cpp:InvokeCancelTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/custom_geometry_tile.test.cpp:InvokeFetchTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/custom_geometry_tile.test.cpp:InvokeTileChanged">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geojson_tile.test.cpp:GeoJSONTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geojson_tile.test.cpp:Issue7648">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geojson_tile.test.cpp:Issue9927">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geometry_tile_data.test.cpp:GeometryTileData">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geometry_tile_data.test.cpp:classifyRings1">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geometry_tile_data.test.cpp:classifyRings2">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geometry_tile_data.test.cpp:limitHoles1">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geometry_tile_data.test.cpp:limitHoles2">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/geometry_tile_data.test.cpp:limitHoles3">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_dem_tile.test.cpp:RasterDEMTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_dem_tile.test.cpp:onError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_dem_tile.test.cpp:onParsed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_dem_tile.test.cpp:onParsedEmpty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_dem_tile.test.cpp:setError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_tile.test.cpp:RasterTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_tile.test.cpp:onError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_tile.test.cpp:onParsed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_tile.test.cpp:onParsedEmpty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/raster_tile.test.cpp:setError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_cache.test.cpp:Issue15926">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_cache.test.cpp:Smoke">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_cache.test.cpp:TileCache">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_coordinate.test.cpp:FromLatLng">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_coordinate.test.cpp:TileCoordinate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_coordinate.test.cpp:ToGeometryCoordinate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_id.test.cpp:Canonical">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_id.test.cpp:Overscaled">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_id.test.cpp:TileID">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/tile_id.test.cpp:Unwrapped">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/vector_tile.test.cpp:Issue8542">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/vector_tile.test.cpp:ParseResults">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/vector_tile.test.cpp:VectorTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/vector_tile.test.cpp:VectorTileData">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/vector_tile.test.cpp:onError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/tile/vector_tile.test.cpp:setError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:AsyncTask">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:DestroyAfterSignaling">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:DestroyShouldNotRunQueue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:MultipleSequencedSchedulers">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:RequestCoalescing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:RequestCoalescingMultithreaded">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:SequencedScheduler">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:ThreadSafety">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/async_task.test.cpp:scheduleAndReplyValue">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:AabbAabbIntersection">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:AabbDistanceToPoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:AabbEquality">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:AabbFullyInsideFrustum">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:AabbIntersectsFrustum">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:AabbIntersectsFrustumEdgeCase">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:BoundingVolumes">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:CreateAabb">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:CreateAabbQuadrants">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/bounding_volumes.test.cpp:CreateFrustumFromProjectionMatrix">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:FreeCameraOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:GetLocation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:GetLocationInvalidPosition">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:GetLocationNegativeAltitude">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:GetLocationUnwrappedPosition">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:LookAtPoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:LookAtPointInvalidInput">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:SetLocation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:SetLocationNegativeAltitude">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:SetLocationUnwrappedLocation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/camera.test.cpp:SetPitchBearing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/dtoa.test.cpp:Dtoa">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/dtoa.test.cpp:Precision">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Boundaries">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Center">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:ContainsBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:ContainsBounds_Wrapped">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:ContainsPoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:ContainsPoint_Wrapped">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:ContainsTileIDs">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:EdgeInsets">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Empty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:FromTileID">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Hull">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Intersects">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Intersects_Wrapped">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:InvalidEdgeInsets">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:InvalidLatLng">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:LatLng">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:LatLngBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Northeast">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Northwest">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Singleton">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Southeast">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:Southwest">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/geo.test.cpp:World">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/grid_index.test.cpp:CircleBox">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/grid_index.test.cpp:CircleCircle">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/grid_index.test.cpp:DuplicateKeys">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/grid_index.test.cpp:GridIndex">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/grid_index.test.cpp:IndexesFeatures">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/grid_index.test.cpp:IndexesFeaturesOverflow">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:ConnectionError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:ExpiredInitial">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:ExpiredNotSet">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:ExpiredSubsequent">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:HttpRetry">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:NotFound">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:OtherError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:RateLimit">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/http_timeout.test.cpp:ServerError">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:Copy">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:Image">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:JPEGTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:Move">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:PNGReadNoProfile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:PNGReadNoProfileAlpha">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:PNGReadProfile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:PNGReadProfileAlpha">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:PNGRoundTrip">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:PNGRoundTripAlpha">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:PNGTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:Premultiply">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/image.test.cpp:Resize">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:CanonicalURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:CanonicalizeRasterTileset">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:CanonicalizeVectorTileset">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:GlyphsURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:GlyphsURLPassThrough">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:MapLibre">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:MapTiler">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:Mapbox">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:SourceURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:SourceURLPassThrough">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:SpriteURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:Sprites">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:SpritesURLPassThrough">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:StyleURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:TileURL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:Tiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/mapbox.test.cpp:TilesURLPassThrough">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/memory.test.cpp:Footprint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/memory.test.cpp:Memory">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/memory.test.cpp:Raster">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/memory.test.cpp:Vector">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/merge_lines.test.cpp:BothEnds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/merge_lines.test.cpp:CircularLines">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/merge_lines.test.cpp:EmptyInnerGeometry">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/merge_lines.test.cpp:EmptyOuterGeometry">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/merge_lines.test.cpp:MergeLines">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/merge_lines.test.cpp:SameText">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/number_conversions.test.cpp:NumberConversions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/number_conversions.test.cpp:number_to_string">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/offscreen_texture.test.cpp:ClearRenderPassColor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/offscreen_texture.test.cpp:EmptyRed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/offscreen_texture.test.cpp:OffscreenTexture">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/offscreen_texture.test.cpp:RenderToTexture">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/pass.test.cpp:NoCopy">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/pass.test.cpp:Pass">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/position.test.cpp:Calculations">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/position.test.cpp:Position">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/projection.test.cpp:Boundaries">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/projection.test.cpp:InvalidProjectedMeters">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/projection.test.cpp:MetersPerPixelAtLatitude">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/projection.test.cpp:ProjectedMeters">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/projection.test.cpp:Projection">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/rotation.test.cpp:Calculations">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/rotation.test.cpp:Rotation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/run_loop.test.cpp:MultipleRun">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/run_loop.test.cpp:MultipleStop">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/run_loop.test.cpp:PlatformIntegration">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/run_loop.test.cpp:Priorities">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/run_loop.test.cpp:RunLoop">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/run_loop.test.cpp:Stop">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/string.test.cpp:FloatingPoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/string.test.cpp:SIZE_T">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/string.test.cpp:ToHex">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/string.test.cpp:ToString">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/text_conversions.test.cpp:TextConversions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/text_conversions.test.cpp:to_lower">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/text_conversions.test.cpp:to_upper">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:CanSelfWakeUp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:Concurrency">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:Context">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:DeleteBeforeChildStarts">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:DeletePausedThread">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:ExecutesAfter">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:InvokeBeforeChildStarts">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:Pause">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:PauseResume">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:ReferenceCanOutliveThread">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:Resume">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:Thread">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:ThreadPoolMessaging">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread.test.cpp:invoke">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread_local.test.cpp:Basic">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread_local.test.cpp:NotSetReturnsNull">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread_local.test.cpp:ShouldNotTakeOwnership">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/thread_local.test.cpp:ThreadLocalStorage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:Antarctic">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:Arctic">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:BoundsCrossingAntimeridian">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:CoordinatesAreUnwrapped">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:DISABLED_FuzzLine">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:DISABLED_FuzzPoly">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:DifferentOverscaledZ">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:DifferentOverscaledZWithPitch">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:DifferentOverscaledZWrapped">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:Empty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:FlippedY">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:FlippedYHelsinki">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:FlippedYPitch">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomInvalid">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomLineRegression11870">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomLineZ10">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomMultiLineString">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomMultiPoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomMultiPolygon">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomPoint">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomPolygon">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:GeomSanFranciscoPoly">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:Pitch">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:PitchIssue15442">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:PitchOverAllowedByContentInsets">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:PitchWithLargerResultSet">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:SanFranciscoWrappedZ10">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:SanFranciscoZ0">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:SanFranciscoZ0Wrapped">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:SanFranciscoZ10">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:SanFranciscoZ22">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:SingletonZ0">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:SingletonZ1">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:TileCount">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:TileCover">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:TileCoverStream">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:World">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:WorldZ0">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:WorldZ1">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_cover.test.cpp:WrappedGeomLineZ10">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_range.test.cpp:ContainsBoundsCrossingAntimeridian">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_range.test.cpp:ContainsBoundsFromTile">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_range.test.cpp:ContainsIntersectingTiles">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_range.test.cpp:ContainsMultiZoom">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_range.test.cpp:ContainsWorld">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_range.test.cpp:ContainsWrappedBounds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_range.test.cpp:TileRange">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_server_options.test.cpp:CopyAssignment">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_server_options.test.cpp:CopyConstructor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/tile_server_options.test.cpp:TileServerOptions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/timer.test.cpp:TEST_REQUIRES_ACCURATE_TIMING">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/timer.test.cpp:Timer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/token.test.cpp:Token">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/token.test.cpp:replaceTokens">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:Directory">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:Domain">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:Extension">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:Filename">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:Path">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:Query">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:Scheme">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:URL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:URLDirectory">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:URLExtension">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:URLFilename">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:percentDecode">Checked</value>
    <value type="Qt::CheckState" key="1@/home/bart/src/maplibre-gl-native/test/util/url.test.cpp:percentEncode">Checked</value>
   </valuemap>
   <value type="int" key="AutoTest.RunAfterBuild">0</value>
   <value type="bool" key="AutoTest.UseGlobal">true</value>
   <valuemap type="QVariantMap" key="ClangTools">
    <value type="bool" key="ClangTools.AnalyzeOpenFiles">true</value>
    <value type="bool" key="ClangTools.BuildBeforeAnalysis">true</value>
    <value type="QString" key="ClangTools.DiagnosticConfig">Builtin.DefaultTidyAndClazy</value>
    <value type="int" key="ClangTools.ParallelJobs">4</value>
    <valuelist type="QVariantList" key="ClangTools.SelectedDirs"/>
    <valuelist type="QVariantList" key="ClangTools.SelectedFiles"/>
    <valuelist type="QVariantList" key="ClangTools.SuppressedDiagnostics"/>
    <value type="bool" key="ClangTools.UseGlobalSettings">true</value>
   </valuemap>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Target.0</variable>
  <valuemap type="QVariantMap">
   <value type="QString" key="DeviceType">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">{b1750cf5-74a3-4c6d-886b-56eb00dd0590}</value>
   <value type="qlonglong" key="ProjectExplorer.Target.ActiveBuildConfiguration">0</value>
   <value type="qlonglong" key="ProjectExplorer.Target.ActiveDeployConfiguration">0</value>
   <value type="qlonglong" key="ProjectExplorer.Target.ActiveRunConfiguration">0</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.0">
    <value type="QString" key="CMake.Build.Type">Release</value>
    <value type="bool" key="CMake.Configure.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="CMake.Configure.UserEnvironmentChanges"/>
    <value type="QString" key="CMake.Initial.Parameters">-DCMAKE_GENERATOR:STRING=Ninja
-DCMAKE_BUILD_TYPE:STRING=Release
-DQT_QMAKE_EXECUTABLE:STRING=%{Qt:qmakeExecutable}
-DCMAKE_PREFIX_PATH:STRING=%{Qt:QT_INSTALL_PREFIX}
-DCMAKE_C_COMPILER:STRING=%{Compiler:Executable:C}
-DCMAKE_CXX_COMPILER:STRING=%{Compiler:Executable:Cxx}
-DCMAKE_CXX_FLAGS_INIT:STRING=%{Qt:QML_DEBUG_FLAG}</value>
    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/home/bart/src/maplibre-gl-native/../build-maplibre-gl-native-Desktop-Release</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="CMakeProjectManager.MakeStep.AdditionalArguments">-j 3</value>
      <value type="QString" key="CMakeProjectManager.MakeStep.BuildPreset"></value>
      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
       <value type="QString">all</value>
      </valuelist>
      <value type="bool" key="CMakeProjectManager.MakeStep.ClearSystemEnvironment">false</value>
      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.UserEnvironmentChanges"/>
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
     </valuemap>
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="CMakeProjectManager.MakeStep.BuildPreset"></value>
      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
       <value type="QString">clean</value>
      </valuelist>
      <value type="bool" key="CMakeProjectManager.MakeStep.ClearSystemEnvironment">false</value>
      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.UserEnvironmentChanges"/>
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
     </valuemap>
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.CustomParsers"/>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ParseStandardOutput">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Release</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeBuildConfiguration</value>
   </valuemap>
   <value type="qlonglong" key="ProjectExplorer.Target.BuildConfigurationCount">1</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.DeployConfiguration.0">
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <value type="qlonglong" key="ProjectExplorer.BuildStepList.StepsCount">0</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Deploy</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Deploy</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Deploy</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">1</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.DeployConfiguration.CustomData"/>
    <value type="bool" key="ProjectExplorer.DeployConfiguration.CustomDataEnabled">false</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.DefaultDeployConfiguration</value>
   </valuemap>
   <value type="qlonglong" key="ProjectExplorer.Target.DeployConfigurationCount">1</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.0">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">mbgl-benchmark-runner</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.mbgl-benchmark-runner</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">mbgl-benchmark-runner</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/bart/src/build-maplibre-gl-native-Desktop-Release</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.1">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">mbgl-cache</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.mbgl-cache</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">mbgl-cache</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/bart/src/build-maplibre-gl-native-Desktop-Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.2">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">mbgl-expression-test</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.mbgl-expression-test</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">mbgl-expression-test</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/bart/src/build-maplibre-gl-native-Desktop-Release/expression-test</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.3">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">mbgl-glfw</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.mbgl-glfw</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">mbgl-glfw</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/bart/src/build-maplibre-gl-native-Desktop-Release/platform/glfw</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.4">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">mbgl-offline</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.mbgl-offline</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">mbgl-offline</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/bart/src/build-maplibre-gl-native-Desktop-Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.5">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">mbgl-render</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.mbgl-render</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">mbgl-render</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/bart/src/build-maplibre-gl-native-Desktop-Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.6">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">mbgl-render-test-runner</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.mbgl-render-test-runner</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">mbgl-render-test-runner</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/bart/src/build-maplibre-gl-native-Desktop-Release</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.7">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">mbgl-test-runner</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.mbgl-test-runner</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">mbgl-test-runner</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/bart/src/build-maplibre-gl-native-Desktop-Release</value>
   </valuemap>
   <value type="qlonglong" key="ProjectExplorer.Target.RunConfigurationCount">8</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.TargetCount</variable>
  <value type="qlonglong">1</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Updater.FileVersion</variable>
  <value type="int">22</value>
 </data>
 <data>
  <variable>Version</variable>
  <value type="int">22</value>
 </data>
</qtcreator>
