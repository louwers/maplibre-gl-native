name: ios-ci

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'ios-*'
    paths:
      - 'platform/ios/**'
      - 'platform/darwin/**'
      - ".github/workflows/ios-ci.yml"
      - "bin/**"
      - "expression-test/**"
      - "include/**"
      - "metrics/**"
      - "platform/default/**"
      - "render-test/**"
      - "scripts/**"
      - "src/**"
      - "test/**"
      - "vendor/**"
      - ".gitmodules"
      - "!**/*.md"
  
  pull_request:
    branches:
      - main
    paths:
      - 'platform/ios/**'
      - 'platform/darwin/**'
      - ".github/workflows/ios-ci.yml"
      - "bin/**"
      - "expression-test/**"
      - "include/**"
      - "metrics/**"
      - "platform/default/**"
      - "render-test/**"
      - "scripts/**"
      - "src/**"
      - "test/**"
      - "vendor/**"
      - ".gitmodules"
      - "!**/*.md"

jobs:
  build:
    runs-on: [self-hosted, macOS, ARM64]
    concurrency:
      # cancel jobs on PRs only
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
    env:
      BUILDTYPE: Debug
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    defaults:
      run:
        working-directory: platform/ios
        shell: bash
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install macos dependencies
        run: |
          brew list cmake || brew install cmake
          brew list ccache || brew install ccache
          brew list pkg-config || brew install pkg-config
          brew list glfw || brew install glfw

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: /user/local/lib/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: npm install
        run: npm ci --ignore-scripts

      - name: Prepare ccache
        run: ccache --clear

      - name: Cache ccache
        uses: actions/cache@v3
        env:
          cache-name: ccache-v1
        with:
          path: ~/.ccache'
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}
          restore-keys: |
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}

      - name: Clear ccache statistics
        run: |
          ccache --zero-stats
          ccache --max-size=2G
          ccache --show-stats
      
      - name: Install iOS packaging dependencies
        run: |
          ./platform/ios/scripts/install-packaging-dependencies.sh
        env:
          CILAUNCH: true

      - name: Build RenderTestApp
        working-directory: platform/ios/build/ios
        run: |
          xcodebuild build-for-testing -scheme RenderTestApp -destination 'generic/platform=iOS'
          mkdir Payload
          mv Debug-iphoneos/RenderTestApp.app Payload
          zip -r Payload.zip Payload
          mv Payload.zip RenderTestApp.ipa
      
      - name: Create artifact for RenderTestApp + XCTest
        uses: actions/upload-artifact@v3
        with:
          name: render-test-app-and-xctest
          path: |
            platform/ios/build/ios/RenderTestApp.ipa
            platform/ios/build/ios/Payload/RenderTestApp.app/PlugIns/RenderTestAppTests.xctest
          retention-days: 1

      - name: Check debug symbols
        run: make darwin-check-public-symbols

      - name: Lint plist files
        run: make ios-lint-plist

      - name: Running ios unit tests
        run: make ios-test

      - name: Running ios UI tests
        run: make ios-uitest

      - name: Build and run SDK unit tests with thread and undefined behavior sanitizers
        run: make ios-sanitize

      - name: Build and run SDK unit tests with address sanitizer
        run: make ios-sanitize-address

      - name: Build and run SDK unit tests with the static analyzer
        run: make ios-static-analyzer
  
  render-test:
    needs: build
    runs-on: [self-hosted, macOS, ARM64]
    steps:
       - name: Download render-test-app-and-xctest
        uses: actions/download-artifact@v3
        with:
          name: render-test-app-and-xctest
      
      - run: ls -R