name: ios-ci

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'ios-*'
    paths:
      - CMakeLists.txt
      - 'platform/ios/**'
      - 'platform/darwin/**'
      - ".github/workflows/ios-ci.yml"
      - "bin/**"
      - "expression-test/**"
      - "include/**"
      - "metrics/**"
      - "platform/default/**"
      - "render-test/**"
      - "scripts/**"
      - "src/**"
      - "test/**"
      - "vendor/**"
      - ".gitmodules"
      - "!**/*.md"
  
  pull_request:
    branches:
      - main
    paths:
      - CMakeLists.txt
      - 'platform/ios/**'
      - 'platform/darwin/**'
      - ".github/workflows/ios-ci.yml"
      - "bin/**"
      - "expression-test/**"
      - "include/**"
      - "metrics/**"
      - "platform/default/**"
      - "render-test/**"
      - "scripts/**"
      - "src/**"
      - "test/**"
      - "vendor/**"
      - ".gitmodules"
      - "!**/*.md"

jobs:
  build:
    runs-on: [self-hosted, macOS, ARM64]
    concurrency:
      # cancel jobs on PRs only
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
    env:
      BUILDTYPE: Debug
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    defaults:
      run:
        working-directory: platform/ios
        shell: bash
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install macos dependencies
        run: |
          brew list cmake || brew install cmake
          brew list ccache || brew install ccache
          brew list pkg-config || brew install pkg-config
          brew list glfw || brew install glfw

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: /user/local/lib/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: npm install
        run: npm ci --ignore-scripts

      - name: Prepare ccache
        run: ccache --clear

      - name: Cache ccache
        uses: actions/cache@v3
        env:
          cache-name: ccache-v1
        with:
          path: ~/.ccache'
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}
          restore-keys: |
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}

      - name: Clear ccache statistics
        run: |
          ccache --zero-stats
          ccache --max-size=2G
          ccache --show-stats
        
      - run: make iproj CI=1

      - name: Build RenderTestApp
        working-directory: platform/ios/build/ios
        run: |
          xcodebuild build-for-testing -scheme RenderTestApp -destination 'generic/platform=iOS'
          mkdir Payload
          mv Debug-iphoneos/RenderTestApp.app Payload
          zip -r Payload.zip Payload
          mv Payload.zip RenderTestApp.ipa
      
      - name: Create artifact for RenderTestApp + XCTest
        uses: actions/upload-artifact@v3
        with:
          name: render-test-app-and-xctest
          path: |
            platform/ios/build/ios/RenderTestApp.ipa
            platform/ios/build/ios/Payload/RenderTestApp.app/PlugIns/RenderTestAppTests.xctest
          retention-days: 1

      - name: Save PR number
        if: github.event_name == 'pull_request'
        working-directory: ./
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo $PR_NUMBER > ./pr_number

      - name: Check debug symbols
        run: make darwin-check-public-symbols

      - name: Lint plist files
        run: make ios-lint-plist

      - name: Running ios unit tests
        run: make ios-test

      - name: Running ios UI tests
        run: make ios-uitest

      # size test

      - name: Build app for size test & output size 
        working-directory: ./
        run: | 
          bazel build --compilation_mode=opt //platform/ios:size --//:maplibre_platform=ios
          cp $(bazel cquery --compilation_mode=opt --output=files //platform/ios:size --//:maplibre_platform=ios) ./size

      - name: Upload size test result
        uses: actions/upload-artifact@v3
        with:
          name: size-test-result
          path: |
            ./size
            ./pr_number
      
      # ---

      - name: Build and run SDK unit tests with thread and undefined behavior sanitizers
        run: make ios-sanitize

      - name: Build and run SDK unit tests with address sanitizer
        run: make ios-sanitize-address

      - name: Build and run SDK unit tests with the static analyzer
        run: make ios-static-analyzer
  
  render-test:
    needs: build
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - name: Download render-test-app-and-xctest
        uses: actions/download-artifact@v3
        with:
          name: render-test-app-and-xctest
      
      - run: ls -R

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 21600
          role-session-name: session-${{ github.run_id }}

      - name: Prepare upload
        uses: realm/aws-devicefarm/create-upload@master
        id: upload-ios-app
        with:
          project_arn: ${{ vars.AWS_DEVICE_FARM_PROJECT_ARN }}
          name: RenderTestApp.ipa
          type: IOS_APP

      - name: Prepare upload
        uses: realm/aws-devicefarm/create-upload@master
        id: upload-xctest
        with:
          project_arn: ${{ vars.AWS_DEVICE_FARM_PROJECT_ARN }}
          name: RenderTestAppTests.xctest
          type: XCTEST_TEST_PACKAGE

      - name: Upload iOS render test
        if: github.ref == 'refs/heads/main'
        run: |
          curl -T RenderTestApp.ipa '${{ steps.upload-ios-app.outputs.url }}'
          curl -T RenderTestAppTests.xctest '${{ steps.upload-xctest.outputs.url }}'

      - name: Schedule test run
        uses: realm/aws-devicefarm/test-application@master
        with:
          name: MapLibre Native iOS Render Test
          project_arn: ${{ vars.AWS_DEVICE_FARM_PROJECT_ARN }}
          device_pool_arn: "arn:aws:devicefarm:us-west-2:373521797162:devicepool:20687d72-0e46-403e-8f03-0941850665bc/d84a2883-0000-44b5-afc4-af22084caf85"
          app_arn: ${{ steps.upload-ios-app.outputs.arn }}
          app_type: IOS_APP
          test_type: XCTEST
          test_package_arn: ${{ steps.upload-xctest.outputs.arn }}
          timeout: 28800
