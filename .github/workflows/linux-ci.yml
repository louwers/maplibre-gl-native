name: linux-ci

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - "src/**"
      - "include/**"
      - "workflows/linux-ci.yml"
      - "vendor/**"
      - "CMakeLists.txt"
      - metrics/linux-gcc8-release-style.json

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # INFO: We are cancelling the concurrency group if the change is on PR. For workflow dispatch, this will not work.
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Get ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}

      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.24.1
          ninjaVersion: latest

      - name: Clear ccache
        run: ccache --clear

      - name: Save and restore ccache keys
        uses: actions/cache@v3
        env:
          cache-name: ccache-maplibre-core
        with:
          path: ~/.ccache
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}
          # INFO: No fallback restore. Only restoring keys that have the same github reference. Rerunning the same workflow
          # will be faster. New workflow invocation with different code, sha1, or head will not be.

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libuv1-dev \
            libjpeg-dev \
            libpng-dev \
            libglfw3-dev

      - name: Build Maplibre GL Core
        run: |
          cmake --version
          cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DMBGL_WITH_COVERAGE=ON
          cmake --build build
      
      - name: Archive render-test-runner
        uses: actions/upload-artifact@v3
        with:
          name: render-test-runner
          path: build/render-test-runner
  
  render-test:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download render-test-runner
        uses: actions/download-artifact@v3
        with:
          name: render-test-runner

      - uses: actions/checkout@v3

      - name: Run render test
        run: xvfb-run -a ./build/mbgl-render-test-runner --manifestPath=metrics/linux-gcc8-release-style.json